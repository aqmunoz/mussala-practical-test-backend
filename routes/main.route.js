const express = require('express');
const mainRoute = express.Router();
const host = process.env.host + ':' + process.env.PORT;
const ENDPOINT = host + '/' + process.env.ENDPOINT_NAME;

const hypertext = [
    { rel:'self', href: host },
    { rel: "create", method: "POST", title: 'Create Gateway', href: ENDPOINT + '/gateway' },
    { rel: "list", method: "GET", title: 'List Gateways', href: ENDPOINT + '/gateways' },
    { rel: "update", method: "PUT", title: 'Update a Gateway', href: ENDPOINT + '/gateway/{ID}' },
    { rel: "delete", method: "DELETE", title: 'Delete a Gateway', href: ENDPOINT + '/gateway/{ID}' },
    { rel: "create", method: "POST", title: 'Create Peripheral', href: ENDPOINT + '/peripheral' },
    { rel: "list", method: "GET", title: 'List Peripherals', href: ENDPOINT + '/peripherals' },
    { rel: "update", method: "PUT", title: 'Update a Peripheral', href: ENDPOINT + '/peripheral/{ID}' },
    { rel: "delete", method: "DELETE", title: 'Delete a Peripheral', href: ENDPOINT + '/peripheral/{ID}' }
];

// Get gateways schema
mainRoute.route('/').get((req, res) => {
    let gatewaySchema = {
        "name": "Gateway",
        "description": "This JSON schema define the parameters require to create a Gateway",
        "properties": {
            "name": {
                "title": "Name",
                "description": "Please enter a name",
                "type": "string",
            },
            "serial": {
                "title": "Serial number",
                "description": "Please enter a unique serial number",
                "type": "number",
                "required": true,
            },
            "address": {
                "title": "IP address",
                "description": "Please enter an IP address",
                "type": "string",
            },
            "peripherals": {
                "title": "Peripherals",
                "description": "A ID list of the peripherals that belongs to this gateway",
                "properties": {
                    "uid": {
                        "title": "UID",
                        "description": "This value its autogenerated by the system"
                    },
                    "vendor": {
                        "title": "Vendor",
                        "description": "Peripheral vendor",
                        "type": "string"
                    },
                    "createdAt": {
                        "title": "Created At",
                        "description": "Date when the peripheral was added to database, its an autogenerated value",
                        "type": "date"
                    },
                    "status": {
                        "title": "Status",
                        "description": "Admit only one of the values online or offline",
                        "type": "string"
                    }
                }
            }
        }
    };

    res.json(gatewaySchema, hypertext);
})

module.exports = mainRoute;